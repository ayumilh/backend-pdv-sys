generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  password    String
  role        UserRole
  sales       Sale[]
  stockMovements StockMovement[]
  cashRegisters CashRegister[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum UserRole {
  ADMIN
  CAIXA
  ESTOQUISTA
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id            String        @id @default(uuid())
  name          String
  barcode       String?       @unique
  price         Float
  imageUrl      String?
  stock         Int
  weight        Float?
  categoryId    String?
  category      Category?     @relation(fields: [categoryId], references: [id])
  salesItems    SaleItem[]
  stockMovements StockMovement[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Weighing      Weighing[]
}

model Scale {
  id        String   @id @default(uuid())
  name      String
  model     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  weighings Weighing[]
}

model Weighing {
  id        String   @id @default(uuid())
  scaleId   String
  scale     Scale    @relation(fields: [scaleId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  weight    Float
  createdAt DateTime @default(now())
  saleItems SaleItem[]
}

model StockMovement {
  id          String           @id @default(uuid())
  productId   String
  product     Product          @relation(fields: [productId], references: [id])
  type        StockMovementType
  quantity    Int
  userId      String?
  user        User?            @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now())
}

enum StockMovementType {
  ENTRADA
  SAIDA
  AJUSTE
  VENDA
}

model Client {
  id        String     @id @default(uuid())
  name      String
  cpf       String?    @unique
  phone     String?
  sales     Sale[]
  loyalty   LoyaltyPoint[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model LoyaltyPoint {
  id        String     @id @default(uuid())
  clientId  String
  client    Client     @relation(fields: [clientId], references: [id])
  points    Int
  reason    String
  createdAt DateTime   @default(now())
}

model Sale {
  id            String        @id @default(uuid())
  clientId      String?
  client        Client?       @relation(fields: [clientId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  total         Float
  paymentMethod PaymentMethod
  status        SaleStatus    @default(FINALIZADA)
  synced        Boolean       @default(true)
  items         SaleItem[]
  createdAt     DateTime      @default(now())
  fiscalDocument FiscalDocument?
}

enum SaleStatus {
  EM_ANDAMENTO
  FINALIZADA
  CANCELADA
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  price     Float
  product   Product  @relation(fields: [productId], references: [id])
  sale      Sale     @relation(fields: [saleId], references: [id])
  weight    Float?
  weighingId String?
  weighing  Weighing? @relation(fields: [weighingId], references: [id])
}

enum PaymentMethod {
  DINHEIRO
  PIX
  CARTAO
}

model CashRegister {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  openedAt      DateTime
  closedAt      DateTime?
  openingAmount Float
  closingAmount Float?
  transactions  CashTransaction[]
}

model CashTransaction {
  id           String   @id @default(uuid())
  type         CashTransactionType
  amount       Float
  description  String?
  createdAt    DateTime @default(now())
  registerId   String
  register     CashRegister @relation(fields: [registerId], references: [id])
}

enum CashTransactionType {
  ABERTURA
  FECHAMENTO
  VENDA
  SANGRIA
  SUPRIMENTO
}

model FiscalDocument {
  id        String   @id @default(uuid())
  saleId    String   @unique
  sale      Sale     @relation(fields: [saleId], references: [id])
  status    String
  receiptUrl String?
  createdAt DateTime @default(now())
}
